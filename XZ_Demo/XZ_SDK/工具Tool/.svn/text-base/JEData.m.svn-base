
#import "JEData.h"

#ifdef DEBUG
#define debugLog(...)    NSLog(__VA_ARGS__)
#define debugMethod()    NSLog(@"%s", __func__)
#define debugError()     NSLog(@"Error at %s Line:%d", __func__, __LINE__)
#else
#define debugLog(...)
#define debugMethod()
#define debugError()
#endif

#define JEApp ((AppDelegate*)[[UIApplication sharedApplication] delegate])
#define PATH_OF_DOCUMENT    [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]


@implementation JEdbObj

- (NSString *)description {
    return [NSString stringWithFormat:@"id=%@, value=%@, timeStamp=%@", _Id, _Obj, _Date];
}

@end

@implementation JEData

static NSString *const CREATE_TABLE_SQL =
@"CREATE TABLE IF NOT EXISTS %@ ( \
id TEXT NOT NULL, \
json TEXT NOT NULL, \
createdTime TEXT NOT NULL, \
PRIMARY KEY(id)) \
";

static NSString *const UPDATE_ITEM_SQL = @"REPLACE INTO %@ (id, json, createdTime) values (?, ?, ?)";
static NSString *const QUERY_ITEM_SQL = @"SELECT json, createdTime from %@ where id = ? Limit 1";
static NSString *const SELECT_ALL_SQL = @"SELECT * from %@";
static NSString *const CLEAR_ALL_SQL = @"DELETE from %@";
static NSString *const DELETE_ITEM_SQL = @"DELETE from %@ where id = ?";
static NSString *const DELETE_ITEMS_SQL = @"DELETE from %@ where id in ( %@ )";
static NSString *const DELETE_ITEMS_WITH_PREFIX_SQL = @"DELETE from %@ where id like ? ";

+ (id)allocWithZone:(struct _NSZone *)zone{
    static JEData *instance;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [super allocWithZone:zone];
    });
    return instance;
}

+ (instancetype)shareData{
    return [[self alloc] init];
}

- (instancetype)init {
    if (self = [super init]) {
    [self dbQueue];
    }
    return self;
}

#pragma mark - Create

//Ê†πÊçÆ Áî®Êà∑id ÂàõÂª∫Â±û‰∫éËá™Â∑±ÁöÑÊï∞ÊçÆÂ∫ì
-(FMDatabaseQueue*)dbQueue{
    if (_dbQueue == nil) {
        if (JEApp.UserInfo.userId.length == 0) {
            return nil;
        }
        NSString * dbPath = [PATH_OF_DOCUMENT stringByAppendingPathComponent:[NSString stringWithFormat:@"JEDb_%@.db",JEApp.UserInfo.userId]];
        _dbQueue = [FMDatabaseQueue databaseQueueWithPath:dbPath];
        NSLog(@"\nüîµ Êï∞ÊçÆÂ∫ìË∑ØÂæÑ\n%@\nüíö",dbPath);
    }
    return _dbQueue;
}

//ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ì Áî®‰∫éÁî®Êà∑ÈÄÄÂá∫ÁôªÂΩïÂêé
- (void)dbclose {
    [_dbQueue close];
    _dbQueue = nil;
}

/** Âú®Â∑≤ÂàõÂª∫Âú®Ê≤ôÁõí‰∏≠ÁöÑ.dbÊñá‰ª∂‰∏ä Ê∑ªÂä†Ë°®*/
-(void)CreateTable:(NSString *)tableName{
    [_dbQueue inDatabase:^(FMDatabase *db) {
        [db executeUpdate:(([NSString stringWithFormat:CREATE_TABLE_SQL, tableName]))];
    }];
}

#pragma mark - Save

/** Êï¥Â≠ò ÂØπÂ∫îtableÈáåÁöÑ‰∏ªÈîÆid*/
-(void)Save:(id)obj Id:(NSString *)Id Table:(NSString *)tableName{
    if (obj == nil || ![NSJSONSerialization isValidJSONObject:obj] || Id.length == 0) {
        return;
    }
    if (tableName.length == 0) {
        tableName = T_JEdbDefaultT;
    }
    NSError * error;
    NSData * data = [NSJSONSerialization dataWithJSONObject:obj options:0 error:&error];
    if (error) {
        return;
    }
    NSString * jsonString = [[NSString alloc] initWithData:data encoding:(NSUTF8StringEncoding)];
    NSDate * createdTime = [NSDate date];
    NSString * sql = [NSString stringWithFormat:UPDATE_ITEM_SQL, tableName];
    [_dbQueue inDatabase:^(FMDatabase *db) {
        [db executeUpdate:sql, Id, jsonString, createdTime];
    }];

}

/** Êï¥Â≠ò ÂØπÂ∫îtableÈáåÁöÑ‰∏ªÈîÆid ÈªòËÆ§Ë°®ÔºöT_JEdbDefaultT*/
-(void)Save:(id)obj Id:(NSString *)Id{
    [self Save:obj Id:Id Table:T_JEdbDefaultT];
}

#pragma mark - Get

/** Ê†πÊçÆidÂèñ  */
-(id)Get:(NSString *)Id Table:(NSString *)tableName{
    return [self GetJEObj:Id Table:tableName].Obj;
}
-(id)Get:(NSString *)Id{
    return [self Get:Id Table:T_JEdbDefaultT];
}

/** Ê†πÊçÆidÂèñJEdbObj  ÈªòËÆ§Ë°®ÔºöT_JEdbDefaultT*/
-(JEdbObj*)GetJEObj:(NSString *)Id Table:(NSString *)tableName{
    __block NSString * json = nil;
    __block NSDate * createdTime = nil;
    [_dbQueue inDatabase:^(FMDatabase *db) {
        FMResultSet * rs = [db executeQuery:[NSString stringWithFormat:QUERY_ITEM_SQL, tableName], Id];
        if ([rs next]) {
            json = [rs stringForColumn:@"json"];
            createdTime = [rs dateForColumn:@"createdTime"];
        }
        [rs close];
    }];
    if (json) {
        NSError * error;
        id result = [NSJSONSerialization JSONObjectWithData:[json dataUsingEncoding:NSUTF8StringEncoding]
                                                    options:(NSJSONReadingMutableContainers) error:&error];
        if (error) {
            return nil;
        }
        JEdbObj *JeObj = [[JEdbObj alloc] init];
        JeObj.Id = Id;
        JeObj.Obj = result;
        JeObj.Date = createdTime;
        return JeObj;
    } else {
        return nil;
    }

}

-(JEdbObj*)GetJEObj:(NSString *)Id{
    return [self GetJEObj:Id Table:T_JEdbDefaultT];
}

/** Ëé∑ÂèñËØ•Ë°®ÊâÄÊúâ*/
-(NSMutableArray*)AllObj:(NSString *)tableName{
    return [self AllItem:tableName JeObj:NO];
}
-(NSMutableArray*)AllJEObj:(NSString *)tableName{
     return [self AllItem:tableName JeObj:YES];
}

- (NSMutableArray *)AllItem:(NSString *)tableName JeObj:(BOOL)JeObj{
    __block NSMutableArray * result = [NSMutableArray array];
    [_dbQueue inDatabase:^(FMDatabase *db) {
        FMResultSet * rs = [db executeQuery:[NSString stringWithFormat:SELECT_ALL_SQL, tableName]];
        while ([rs next]) {
            if (!JeObj) {
                id object = [NSJSONSerialization JSONObjectWithData:[[rs stringForColumn:@"json"] dataUsingEncoding:NSUTF8StringEncoding]
                                                            options:(NSJSONReadingMutableContainers) error:NULL];
                [result addObject:object];
            }else{
                JEdbObj * item = [[JEdbObj alloc] init];
                item.Id = [rs stringForColumn:@"id"];
                item.Obj = [rs stringForColumn:@"json"];
                item.Date = [rs dateForColumn:@"createdTime"];
                [result addObject:item];
            }
        }
        [rs close];
    }];
    return result;
}

-(void)Delete:(NSString *)Id T_Name:(NSString *)tableName{
    [_dbQueue inDatabase:^(FMDatabase *db) {
        debugLog(@"Âà†Èô§ %d",[db executeUpdate:[NSString stringWithFormat:DELETE_ITEM_SQL, tableName], Id]);
    }];
    
}

-(void)Delete:(NSString *)Id{
    [self Delete:Id T_Name:T_JEdbDefaultT];
}

-(void)clearTable:(NSString *)tableName{
    [_dbQueue inDatabase:^(FMDatabase *db) {
        debugLog(@"Ê∏ÖÈô§ %d",[db executeUpdate:[NSString stringWithFormat:CLEAR_ALL_SQL, tableName]]);
    }];
}

- (void)deleteObjectsByIdArray:(NSArray *)objectIdArray fromTable:(NSString *)tableName {
    NSMutableString *stringBuilder = [NSMutableString string];
    for (id objectId in objectIdArray) {
        NSString *item = [NSString stringWithFormat:@" '%@' ", objectId];
        if (stringBuilder.length == 0) { [stringBuilder appendString:item];
        } else {
        [stringBuilder appendString:@","]; [stringBuilder appendString:item];
        }
    }
    [_dbQueue inDatabase:^(FMDatabase *db) {
        debugLog(@"Âà†Èô§ %d",[db executeUpdate:[NSString stringWithFormat:DELETE_ITEMS_SQL, tableName, stringBuilder]]);
    }];
}

- (void)deleteObjectsByIdPrefix:(NSString *)objectIdPrefix fromTable:(NSString *)tableName {
    [_dbQueue inDatabase:^(FMDatabase *db) {
        debugLog(@"Âà†Èô§ %d",[db executeUpdate:[NSString stringWithFormat:DELETE_ITEMS_WITH_PREFIX_SQL, tableName], [NSString stringWithFormat:@"%@%%", objectIdPrefix]]);
    }];
}




@end
